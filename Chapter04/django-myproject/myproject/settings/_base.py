"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os, sys
import json
from django.utils.translation import gettext_lazy as _

from django.core.exceptions import ImproperlyConfigured
from myproject.apps.core.versioning import get_git_changeset_timestamp

with open(os.path.join(os.path.dirname(__file__), 'secrets.json'), 'r') as f:
  secrets = json.loads(f.read())

def get_secret(setting):
  """Get the secret variable or return explicit exception."""
  try:
    return secrets[setting]
  except KeyError:
    error_msg = f'Set the {setting} secret variable'
    raise ImproperlyConfigured(error_msg)

# def get_secret(setting):
#     """Get the secret variable or return explicit exceptions."""
#     try:
#         return os.environ[setting]
#     except KeyError:
#         error_msg = f'Set the {setting} enviroment variable'
#         raise ImproperlyConfigured(error_msg)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
EXTERNAL_BASE = os.path.join(BASE_DIR, 'externals')
EXTERNAL_LIBS_PATH = os.path.join(EXTERNAL_BASE, 'libs')
EXTERNAL_APPS_PATH = os.path.join(EXTERNAL_BASE, 'apps')
sys.path = ["", EXTERNAL_LIBS_PATH, EXTERNAL_APPS_PATH] + sys.path

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('DJANGO_SECRET_KEY')

DATABASES = {
  'default': {
    # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
    "ENGINE": "django.contrib.gis.db.backends.postgis",
    'NAME': get_secret('DATABASE_NAME'),
    'USER': get_secret('DATABASE_USER'),
    'PASSWORD': get_secret('DATABASE_PASSWORD'),
    'HOST': '127.0.0.1',
    'PORT': '5432',
  }
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sekizai',
    'django.contrib.gis',
    "imagekit",
    'crispy_forms',
    'myproject.apps.core',
    'myproject.apps.locations',
    'myproject.apps.likes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'myproject', 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "sekizai.context_processors.sekizai",
                "myproject.apps.core.context_processors.website_url",
                "myproject.apps.core.context_processors.google_maps",
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = [
    ("en", "English"),
    ("fr", "French"),
    ("de", "German"),
    ("es", "Spanish"),
    ("zh-CN", "简体中文")
]

LANGUAGES_EXCEPT_THE_DEFAULT = [
    (lang_code, lang_name)
    for lang_code, lang_name in LANGUAGES
    if lang_code != LANGUAGE_CODE
]

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

COUNTRY_CHOICES = [
    ("DE", _("Germany")),
    ("ES", _("Spain")),
    ("FR", _("France")),
    ("UK", _("United Kingdom")),
    ("CN", _("China")),
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
timestamp = get_git_changeset_timestamp(BASE_DIR)
STATIC_URL = f'/static/{timestamp}/'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'myproject', 'site_static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

GOOGLE_MAPS_API_KEY = get_secret("GOOGLE_MAPS_API_KEY")